# This workflow makes a naive attempt at enforcing our internal convention that
# PRs should generally always and only be labeled with the `deployment` label if it merges the `dev` branch into `main`.

name: Label deployment pull requests

on:
  pull_request:
    # `edited` will trigger if the PR changes its base branch
    types: [ opened, edited ]

jobs:
  manage_deployment_label_of_pull_request:
    # Do a rough check - which will weed out most PRs - before doing more detailed checks in the steps below
    if: ${{ github.base_ref == 'main' && github.head_ref == 'dev'
      || contains(github.event.pull_request.labels.*.name, 'deployment') }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@021a2405c7f990db57f5eae5397423dcc554159c # v1.7.0
        with:
          app_id: ${{ secrets.MAKE_BOT_APP_ID }}
          private_key: ${{ secrets.MAKE_BOT_APP_PEM }}

      - name: Get label data
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          ORGANIZATION: MAKENTNU
          REPOSITORY_NAME: web
          DEPLOYMENT_LABEL_NAME: deployment
        run: |
          gh api graphql -f query='
            query ($org: String!, $repoName: String!) {
              organization(login: $org) {
                repository(name: $repoName) {
                  labels(first: 100) {
                    nodes {
                      id
                      name
                    }
                  }
                }
              }
            }' -f org="$ORGANIZATION" -f repoName="$REPOSITORY_NAME" > repo_data.json

          # The ID of this repository's deployment label
          echo "LABEL_ID=$(jq --arg LABEL_NAME "$DEPLOYMENT_LABEL_NAME" -r '.data.organization.repository.labels.nodes[] | select(.name==$LABEL_NAME) | .id' repo_data.json)" >> "$GITHUB_ENV"

      - name: Label deployment pull request
        # Add the `deployment` label if the PR merges `dev` into `main`, and it doesn't already have the `deployment` label
        if: ${{ github.base_ref == 'main' && github.head_ref == 'dev'
          && !contains(github.event.pull_request.labels.*.name, 'deployment') }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          CONTENT_ID: ${{ github.event.pull_request.node_id }}
        run: |
          gh api graphql -f query='
            mutation ($content: ID!, $label: ID!) {
              addLabelsToLabelable(input: {labelableId: $content, labelIds: [$label]}) {
                labelable {
                  labels {
                    totalCount
                  }
                }
              }
            }' -f content="$CONTENT_ID" -f label="$LABEL_ID" --silent

      - name: Remove label from non-deployment pull request
        # Remove the `deployment` label if the PR is not for merging `dev` into `main`
        if: ${{ (github.base_ref != 'main' || github.head_ref != 'dev')
          && contains(github.event.pull_request.labels.*.name, 'deployment') }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
          CONTENT_ID: ${{ github.event.pull_request.node_id }}
        run: |
          gh api graphql -f query='
            mutation ($content: ID!, $label: ID!) {
              removeLabelsFromLabelable(input: {labelableId: $content, labelIds: [$label]}) {
                labelable {
                  labels {
                    totalCount
                  }
                }
              }
            }' -f content="$CONTENT_ID" -f label="$LABEL_ID" --silent

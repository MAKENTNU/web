from typing import List

import bleach
from ckeditor.fields import RichTextFormField
from ckeditor_uploader.fields import RichTextUploadingFormField
from django import forms
from django.conf import settings
from django.utils.translation import gettext_lazy as _

from util.logging_utils import get_request_logger
from .data_structures import MultiLingualTextStructure
from ..widgets import CKEditorWidget


class MultiLingualFormField(forms.MultiValueField):
    """
    A multi-value field for a multilingual database field.
    """
    default_error_messages = {
        'required': _("One or more languages have no content."),
    }

    subfield_class = forms.CharField

    def __init__(self, *args, languages: List[str] = MultiLingualTextStructure.SUPPORTED_LANGUAGES, **kwargs):
        self.languages = languages

        subfield_attrs = {
            'max_length': kwargs.pop('max_length', None),
            **kwargs,
            'label': None,  # the `label` attribute is not used by the subfields, so override the one in `kwargs`
        }
        subfields = []
        for language in self.languages:
            subfield = self.subfield_class(**subfield_attrs)
            subfield.locale = language
            subfields.append(subfield)

        super().__init__(fields=subfields, *args, **kwargs)

    def compress(self, data_list):
        """
        Merges the input from the different form fields into a single value.

        :param data_list: A list of the inputs of the different fields
        :return: A MultiLingualTextStructure element
        """
        structure = MultiLingualTextStructure("", True)
        if not data_list:
            return structure
        if len(data_list) != len(self.languages):
            get_request_logger().exception(
                f"Unexpected number of elements:\n\t{data_list}"
                f"\n\t(Should have matched the number of elements in {self.languages})"
            )
            return structure

        for i, language in enumerate(self.languages):
            structure[language] = data_list[i]
        return structure


class MultiLingualRichTextFormField(MultiLingualFormField):
    # Most of the manually added tags, attributes, styles and protocols, are based on the HTML generated by CKEditor
    ALLOWED_TAGS = bleach.sanitizer.ALLOWED_TAGS + [
        "div", "p", "span", "br", "hr", "pre",
        *(f"h{i}" for i in range(1, 7)),
        "s", "sub", "sup", "u", "big", "small", "q",
        "img", "figure", "figcaption",
        "table", "thead", "tr", "th", "tbody", "td", "caption",
    ]
    ALLOWED_ATTRIBUTES = {
        **bleach.sanitizer.ALLOWED_ATTRIBUTES,
        "*": ["class", "dir", "id", "lang", "style", "title"],
        "a": ["download", "href", "name", "target"],
        "img": ["alt", "height", "src", "width"],
        "table": ["align", "border", "cellpadding", "cellspacing", "summary"],
        "th": ["scope"],
    }
    ALLOWED_STYLES = bleach.sanitizer.ALLOWED_STYLES + [
        "display", "height", "width",
        "float", "margin", "margin-left", "padding",
        "background", "background-color", "border", "color",
        "text-align", "text-decoration",
    ]
    ALLOWED_PROTOCOLS = bleach.sanitizer.ALLOWED_PROTOCOLS + [
        "tel",
    ]

    # Unless we want to emulate the CKEditor code, it requires a different field class for its subfields
    subfield_class = RichTextFormField

    def clean(self, value: MultiLingualTextStructure):
        value: MultiLingualTextStructure = super().clean(value)
        if self.should_bleach():
            for language, content in value.languages.items():
                value.languages[language] = bleach.clean(
                    content,
                    tags=self.ALLOWED_TAGS,
                    attributes=self.ALLOWED_ATTRIBUTES,
                    styles=self.ALLOWED_STYLES,
                    protocols=self.ALLOWED_PROTOCOLS,
                )
        return value

    def should_bleach(self):
        # If at least one of the subwidgets use the edit source config, do not bleach
        if isinstance(self.widget, forms.MultiWidget):
            for subwidget in self.widget.widgets:
                if isinstance(subwidget, CKEditorWidget) and subwidget.config_name == settings.CKEDITOR_EDIT_SOURCE_CONFIG_NAME:
                    return False
        return True


class MultiLingualRichTextUploadingFormField(MultiLingualRichTextFormField):
    subfield_class = RichTextUploadingFormField
